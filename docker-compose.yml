version: '3.6'

networks:
  web-network:

services:
  nginx:
    build:
      args:
        - ht_pass=${DR_USER_PASS}
        - ht_user=${HT_USER}
        - ht_dm_pass=${DR_DM_PASS}
        - ht_dm_user=${HT_DM_USER}
      context: ./nginx/
      dockerfile: Dockerfile
      network: host
    user: 1000:1000
    container_name: nginx
    command: /bin/bash -c "envsubst \"`for v in $$(compgen -v);do printf '$${%s} ' $$v;done`'\" < /etc/nginx/conf.d/default.conf.${SSL}.template > /etc/nginx/conf.d/default.conf && envsubst \"`for v in $$(compgen -v);do printf '$${%s} ' $$v;done`'\" < /var/www/certbot.sh.template > /var/www/certbot.sh && sudo nginx -g 'daemon off;'"
    environment:
      - HTACCESS
      - DOMAIN
      - DOMAIN_EMAIL
      - DR_HOST
      - II_HOST
      - PA_HOST
      - SSL
    ports:
      - '80:80'
      - '443:443'
    links:
      - dungeon-revealer:3000
      - improved-initiative:4000
      - paragon:3000
    volumes:
      - ./nginx/files/:/etc/nginx/
      - ./nginx/ssl/:/etc/letsencrypt/
      - ./dungeon-revealer/build/:/var/www/dungeon-revealer/:rw,cached
      - ./improved-initiative/public-tmp/:/var/www/improved-initiative/:rw
      - ./paragon/build/:/var/www/paragon/:rw
    restart: always
    depends_on:
      - dungeon-revealer
      - improved-initiative
      - paragon
    networks:
      - web-network

  dungeon-revealer:
    build:
      context: ./dungeon-revealer/
      dockerfile: Dockerfile
      network: host
    working_dir: /usr/src/app
    container_name: dungeon-revealer
    command: /bin/sh -c "cp -a ./build-tmp/* ./build/ && node server-build/index.js"
    environment:
      - PC_PASSWORD=${DR_USER_PASS}
      - DM_PASSWORD=${DR_DM_PASS}
    volumes:
      - ./dungeon-revealer/data:/usr/src/app/data
      - ./dungeon-revealer/build/:/usr/src/app/build/:rw
    restart: always
    ports:
      - '3000'
    user: 1000:1000
    networks:
      - web-network

  improved-initiative:
    build:
      context: ./improved-initiative/
      dockerfile: Dockerfile
      network: host
    container_name: improved-initiative
    working_dir: /usr/src/app
    command: /bin/bash -c "cp -a ./public/* ./public-tmp/ && node server/server.js"
    restart: always
    volumes:
      - ./improved-initiative/public-tmp/:/usr/src/app/public-tmp:rw
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DB_CONNECTION_STRING=mongodb://mongo:27017/
    ports:
      - '4000'
    user: 1000:1000
    networks:
      - web-network

  mongo:
    image: mongo:latest
    container_name: mongo
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - ./mongo/data:/data/db:rw
    ports:
      - '27017'
    networks:
      - web-network

  paragon:
    build:
      context: ./paragon/
      dockerfile: Dockerfile
      network: host
    container_name: paragon
    command: /bin/sh -c "export PATH=$PATH:/home/node/.npm-global/bin/ && cp -a ./build-tmp/* ./build/ && serve -s build -l 3000"
    working_dir: /usr/src/app
    restart: always
    volumes:
      - ./paragon/build/:/usr/src/app/build/:rw
    ports:
      - '3000'
    user: 1000:1000
    networks:
      - web-network
